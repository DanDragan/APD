*** Tema 1 APD ***
*** 333CA Dragan Dan-Stefan ***

Continutul arhivei:

    1) serial_neoptimizat.c
    2) serial_optimizat.c
    3) paralel_neoptimizat.c
    4) paralel_optimizat.c
    5) Makefile
    6) README
    
*** Specificatii hardware si software ale masinii pe care s-a testat ***

    Pentru testare am folosit un calculator cu procesor i3, dual-core, cu 
    frecventa de 2,1GH si 4 thread-uri de la Intel, ce are 3GB memorie RAM si ruleaza
    un sistem de operare Linux Mint 15 Cinnamon pe 64 de biti.
    Compilator folosit : gcc (Ubuntu/Linaro 4.7.3-1ubuntu1) 4.7.3
    
*** Explica»õii algoritmi ***

Serial Neoptimizat:
    Pentru fiecare element din matrice se verifica toate celelalte elemente
    pentru a vedea daca distanta de la el catre celalalt element e mai mica
    decat distanta minima a culorii elementului comparat. Apoi se va face
    maximul distantelor din vectorul de distante ale fiecarei culori si
    se completeaza matricea saptamanii curente.
    
    Complexitate:
    O(nr_saptamani * N^4)
    
    Timpi de rulare:
        pentru ./serial_neoptimizat 10 ./teste_tema1/in10_5 ./out
            0m0.005s
        pentru ./serial_neoptimizat 60 ./teste_tema1/in50_7 ./out
            0m2.689s
        pentru ./serial_neoptimizat 100 ./teste_tema1/in100_20 ./out
            1m8.102s
        
Paralel Neoptimizat:
    Acelasi algoritm ca cel serial, doar ca se paralelizeaza scanarea
    fiecarui element.
    
    Timpi de rulare cu schedulying dynamic:
        pentru ./paralel_neoptimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 1m12.109s
            2 thread-uri : 0m37.427s
            4 thread-uri : 0m32.507s
            
            Speed-up : 72.109 / 37.427 = 1.92 la 2 thread-uri
                       72.109 / 32.507 = 2.21 la 4 thread-uri
                       
        pentru ./paralel_neoptimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m2.905s
            2 thread-uri: 0m1.527s
            4 thread-uri: 0m1.406s
            
            Speed-up : 2.905 / 1.527 = 1.90 la 2 thread-uri
                       2.905 / 1.275 = 2.27 la 4 thread-uri
                       
Serial Optimizat
    Am modificat algoritmul serial neoptimizat si in loc sa se scaneze
    pentru fiecare element toate celelalte elemente din matrice, se
    vor scana doar cele care se gasesc in raza elementului, ce va fi
    initial 1 si va fi incrementata pana cand toate distantele catre o anumita
    culoare vor fi modificate.
    
    Timpi de rulare:
        pentru ./serial_optimizat 10 ./teste_tema1/in10_5 ./out
            0m0.004s
        pentru ./serial_optimizat 60 ./teste_tema1/in50_7 ./out
            0m0.937s
        pentru ./serial_optimizat 100 ./teste_tema1/in100_20 ./out
            0m17.813s
            
Paralel Optimizat
    La fel ca la algoritmul serial optimizat doar ca scanarea elementelor
    matricii e paralelizata, variabilele necesare fiecarui thread sunt
    private, iar incrementarea numarului de senatori de o anumita culoare
    se face intr-o sectiune critica.
    
    
*** Analiza timpi pentru varianta paralela optimizata ***
    
        
    schedulying dynamic, chunk size = 1:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m17.991s
            2 thread-uri : 0m10.004s
            4 thread-uri : 0m9.218s
            
            Speed-up : 17.991 / 10.004 = 1.79 la 2 thread-uri
                       17.991 / 9.218 = 1.95 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.986s
            2 thread-uri : 0m0.585s
            4 thread-uri : 0m0.535s
            
            Speed-up : 0.986 / 0.585 = 1.68 la 2 thread-uri
                       0.986 / 0.535 = 1.84 la 4 thread-uri
    
    
    schedulying dynamic, chunk size = 5:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m17.994s
            2 thread-uri : 0m9.969s
            4 thread-uri : 0m9.146s
            
            Speed-up : 17.994 / 9.969 = 1.80 la 2 thread-uri
                       17.994 / 9.146 = 1.96 la 4 thread-uri
                      
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.939s
            2 thread-uri : 0m0.656s
            4 thread-uri : 0m0.517s
            
            Speed-up : 0.939 / 0.656 = 1.43 la 2 thread-uri
                       0.939 / 0.517 = 1.81 la 4 thread-uri
                       
    
    schedulying dynamic, chunk size = 10:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m18.000s
            2 thread-uri : 0m10.121s
            4 thread-uri : 0m9.255s
            
            Speed-up : 18.000 / 10.121 = 1.77 la 2 thread-uri
                       18.000 / 9.255 = 1.94 la 4 thread-uri
                      
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.939s
            2 thread-uri : 0m0.645s
            4 thread-uri : 0m0.535s
            
            Speed-up : 0.939 / 0.645 = 1.45 la 2 thread-uri
                       0.939 / 0.535 = 1.75 la 4 thread-uri
                       
                       
    schedulying dynamic, chunk size = 15:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m17.993s
            2 thread-uri : 0m9.956s
            4 thread-uri : 0m9.305s
            
            Speed-up : 17.993 / 9.956 = 1.80 la 2 thread-uri
                       17.993 / 9.305 = 1.93 la 4 thread-uri
                      
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.938s
            2 thread-uri : 0m0.586s
            4 thread-uri : 0m0.546s
            
            Speed-up : 0.938 / 0.586 = 1.60 la 2 thread-uri
                       0.938 / 0.546 = 1.71 la 4 thread-uri
                       
                       
    schedulying dynamic, chunk size = 20:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m17.987s
            2 thread-uri : 0m9.939s
            4 thread-uri : 0m9.281s
            
            Speed-up : 17.987 / 9.939 = 1.80 la 2 thread-uri
                       17.987 / 9.218 = 1.95 la 4 thread-uri
                      
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.939s
            2 thread-uri : 0m0.611s
            4 thread-uri : 0m0.518s
            
            Speed-up : 0.939 / 0.611 = 1.53 la 2 thread-uri
                       0.939 / 0.518 = 1.81 la 4 thread-uri
                       
                       
    schedulying static, chunk size = 1:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m18.032s
            2 thread-uri : 0m9.950s
            4 thread-uri : 0m9.135s
            
            Speed-up : 18.032 / 9.950 = 1.81 la 2 thread-uri
                       18.032 / 9.135 = 1.97 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.939s
            2 thread-uri : 0m0.570s
            4 thread-uri : 0m0.533s
            
            Speed-up : 0.939 / 0.570 = 1.64 la 2 thread-uri
                       0.939 / 0.533 = 1.76 la 4 thread-uri                                   
         	
         	
    schedulying static, chunk size = 5:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m18.003s
            2 thread-uri : 0m9.972s
            4 thread-uri : 0m9.464s
            
            Speed-up : 18.003 / 9.972 = 1.80 la 2 thread-uri
                       18.003 / 9.464 = 1.90 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.940s
            2 thread-uri : 0m0.568s
            4 thread-uri : 0m0.536s
            
            Speed-up : 0.940 / 0.568 = 1.65 la 2 thread-uri
                       0.940 / 0.536 = 1.75 la 4 thread-uri
                       
                       
    schedulying static, chunk size = 10:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m17.992s
            2 thread-uri : 0m9.961s
            4 thread-uri : 0m9.239s
            
            Speed-up : 17.992 / 9.961 = 1.80 la 2 thread-uri
                       17.992 / 9.239 = 1.94 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.943s
            2 thread-uri : 0m0.566s
            4 thread-uri : 0m0.528s
            
            Speed-up : 0.943 / 0.566 = 1.66 la 2 thread-uri
                       0.943 / 0.528 = 1.78 la 4 thread-uri
                       
                       
    schedulying static, chunk size = 15:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m18.028s
            2 thread-uri : 0m10.051s
            4 thread-uri : 0m9.121s
            
            Speed-up : 18.028 / 10.051 = 1.79 la 2 thread-uri
                       18.028 / 9.121 = 1.97 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.942s
            2 thread-uri : 0m0.568s
            4 thread-uri : 0m0.534s
            
            Speed-up : 0.942 / 0.568 = 1.65 la 2 thread-uri
                       0.942 / 0.534 = 1.76 la 4 thread-uri
                       
                       
    schedulying static, chunk size = 20:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m18.003s
            2 thread-uri : 0m9.931s
            4 thread-uri : 0m9.208s
            
            Speed-up : 18.003 / 9.931 = 1.81 la 2 thread-uri
                       18.003 / 9.208 = 1.95 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.944s
            2 thread-uri : 0m0.566s
            4 thread-uri : 0m0.543s
            
            Speed-up : 0.944 / 0.566 = 1.66 la 2 thread-uri
                       0.944 / 0.543 = 1.73 la 4 thread-uri
                       
                       
    schedulying guided, chunk size = 1:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m17.991s
            2 thread-uri : 0m9.982s
            4 thread-uri : 0m9.278s
            
            Speed-up : 17.991 / 9.982 = 1.80 la 2 thread-uri
                       17.991 / 9.278 = 1.93 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.946s
            2 thread-uri : 0m0.574s
            4 thread-uri : 0m0.534s
            
            Speed-up : 0.946 / 0.574 = 1.64 la 2 thread-uri
                       0.946 / 0.534 = 1.77 la 4 thread-uri
                       
                       
    schedulying guided, chunk size = 5:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m18.007s
            2 thread-uri : 0m9.965s
            4 thread-uri : 0m9.209s
            
            Speed-up : 18.007 / 9.965 = 1.80 la 2 thread-uri
                       18.007 / 9.209 = 1.95 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.954s
            2 thread-uri : 0m0.621s
            4 thread-uri : 0m0.533s
            
            Speed-up : 0.954 / 0.621 = 1.53 la 2 thread-uri
                       0.954 / 0.533 = 1.72 la 4 thread-uri
                       
                       
    schedulying guided, chunk size = 10:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m17.994s
            2 thread-uri : 0m9.941s
            4 thread-uri : 0m9.326s
            
            Speed-up : 17.994 / 9.941 = 1.81 la 2 thread-uri
                       17.994 / 9.326 = 1.92 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.943s
            2 thread-uri : 0m0.599s
            4 thread-uri : 0m0.546s
            
            Speed-up : 0.943 / 0.599 = 1.57 la 2 thread-uri
                       0.943 / 0.546 = 1.72 la 4 thread-uri
                       
    
    schedulying guided, chunk size = 15:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m17.994s
            2 thread-uri : 0m9.926s
            4 thread-uri : 0m9.122s
            
            Speed-up : 17.994 / 9.926 = 1.81 la 2 thread-uri
                       17.994 / 9.122 = 1.97 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.942s
            2 thread-uri : 0m0.574s
            4 thread-uri : 0m0.536s
            
            Speed-up : 0.942 / 0.574 = 1.64 la 2 thread-uri
                       0.942 / 0.536 = 1.75 la 4 thread-uri
                       
                       
    schedulying guided, chunk size = 20:
        pentru ./paralel_optimizat 100 ./teste_tema1/in100_20 ./out
            1 thread : 0m17.995s
            2 thread-uri : 0m9.918s
            4 thread-uri : 0m9.305s
            
            Speed-up : 17.995 / 9.918 = 1.81 la 2 thread-uri
                       17.995 / 9.305 = 1.93 la 4 thread-uri
                       
        pentru ./paralel_optimizat 60 ./teste_tema1/in50_7 ./out
            1 thread : 0m0.950s
            2 thread-uri : 0m0.566s
            4 thread-uri : 0m0.535s
            
            Speed-up : 0.950 / 0.566 = 1.67 la 2 thread-uri
                       0.950 / 0.535 = 1.77 la 4 thread-uri
                       

*** Concluzii ***
    Analizand timpii de mai sus se poate observa ca cei mai buni timpi de
    rulare se optin atunci cand chunk_size-ul este mai mic, in special
    pentru tipul de scheduling dynamic.                       		
