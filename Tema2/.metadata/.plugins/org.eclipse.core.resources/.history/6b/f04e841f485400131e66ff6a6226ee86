import java.util.HashMap;

/**
 * Clasa ce reprezinta o solutie partiala pentru problema de rezolvat. Aceste
 * solutii partiale constituie task-uri care sunt introduse in workpool.
 */
abstract class PartialSolution {
	abstract public void go();
}

/**
 * Clasa ce reprezinta un thread worker.
 */
class Worker extends Thread {
	WorkPool wp;
	HashMap<String, Float> frequencies;

	public Worker(WorkPool workpool) {
		this.wp = workpool;
	}

	/**
	 * Procesarea unei solutii partiale. Aceasta poate implica generarea unor
	 * noi solutii partiale care se adauga in workpool folosind putWork().
	 * Daca s-a ajuns la o solutie finala, aceasta va fi afisata.
	 */
	void processPartialSolution(PartialSolution ps) {
		ps.go();
        if(ps instanceof Map) {
        	String file;
        	Map	 task = (Map)ps;
            file = task.getFile();
            Main.mapHashToFile(file, task.getWords());    
        }
        else if(ps instanceof Reduce) {
        	String file;
        	Reduce task = (Reduce)ps;
        	file = task.getFile();
        	frequencies = task.getFrequencies(); 
        	Main.mapFreqToFile(file, frequencies);
        }
	}
	
	HashMap<String, Float> getFrequencies() {
		return frequencies;
	}
	
	public void run() {
		System.out.println("Thread-ul worker " + this.getName() + " a pornit...");
		while (true) {
			PartialSolution ps = wp.getWork();
			if (ps == null)
				break;
			
			processPartialSolution(ps);
		}
		System.out.println("Thread-ul worker " + this.getName() + " s-a terminat...");
	}

	
}


public class ReplicatedWorkers {

	public static void main(String args[]) {
		// ..
	}
	
}


